// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth_srv/proto/auth.proto

package shop_auth_srv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthService interface {
	// 根据用户id请求设置token
	SetTokenByUserId(ctx context.Context, in *CSTokenSet, opts ...client.CallOption) (*SCTokenSet, error)
	// 根据用户id请求清理token
	ClearTokenByUserId(ctx context.Context, in *CSTokenClear, opts ...client.CallOption) (*SCTokenClear, error)
	// 根据token获取用户id
	GetUserIdByToken(ctx context.Context, in *CSUserIdGet, opts ...client.CallOption) (*SCUserIdGet, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "shop.auth.srv"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) SetTokenByUserId(ctx context.Context, in *CSTokenSet, opts ...client.CallOption) (*SCTokenSet, error) {
	req := c.c.NewRequest(c.name, "Auth.SetTokenByUserId", in)
	out := new(SCTokenSet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ClearTokenByUserId(ctx context.Context, in *CSTokenClear, opts ...client.CallOption) (*SCTokenClear, error) {
	req := c.c.NewRequest(c.name, "Auth.ClearTokenByUserId", in)
	out := new(SCTokenClear)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetUserIdByToken(ctx context.Context, in *CSUserIdGet, opts ...client.CallOption) (*SCUserIdGet, error) {
	req := c.c.NewRequest(c.name, "Auth.GetUserIdByToken", in)
	out := new(SCUserIdGet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	// 根据用户id请求设置token
	SetTokenByUserId(context.Context, *CSTokenSet, *SCTokenSet) error
	// 根据用户id请求清理token
	ClearTokenByUserId(context.Context, *CSTokenClear, *SCTokenClear) error
	// 根据token获取用户id
	GetUserIdByToken(context.Context, *CSUserIdGet, *SCUserIdGet) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		SetTokenByUserId(ctx context.Context, in *CSTokenSet, out *SCTokenSet) error
		ClearTokenByUserId(ctx context.Context, in *CSTokenClear, out *SCTokenClear) error
		GetUserIdByToken(ctx context.Context, in *CSUserIdGet, out *SCUserIdGet) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) SetTokenByUserId(ctx context.Context, in *CSTokenSet, out *SCTokenSet) error {
	return h.AuthHandler.SetTokenByUserId(ctx, in, out)
}

func (h *authHandler) ClearTokenByUserId(ctx context.Context, in *CSTokenClear, out *SCTokenClear) error {
	return h.AuthHandler.ClearTokenByUserId(ctx, in, out)
}

func (h *authHandler) GetUserIdByToken(ctx context.Context, in *CSUserIdGet, out *SCUserIdGet) error {
	return h.AuthHandler.GetUserIdByToken(ctx, in, out)
}
